---
---

<div id="loading-screen" class="fixed inset-0 bg-black/95 backdrop-blur-sm z-[100] flex items-center justify-center transition-all duration-700">
    <div class="text-center space-y-12">
        <div class="flex items-center justify-center gap-1">
            <span class="text-8xl font-bold text-white animate-bounce">A</span>
            <span class="text-8xl font-bold text-violet-400 animate-bounce delay-150">L</span>
        </div>

        <div class="w-48 bg-gray-800 rounded-full h-1.5 overflow-hidden mx-auto">
            <div id="progress-bar" 
                 class="w-0 h-full bg-violet-400 rounded-full transition-all duration-300 ease-in-out">
            </div>
        </div>

        <div class="h-6 overflow-hidden">
            <p id="loading-text" 
               class="text-violet-400/80 text-sm font-light tracking-widest uppercase animate-pulse">
                Chargement
            </p>
        </div>
    </div>
</div>

<style is:global>
    body.loading {
        overflow: hidden;
    }
    
    body.loading nav {
        opacity: 0;
        pointer-events: none;
    }

    body.loading main {
        opacity: 0;
        pointer-events: none;
    }
</style>

<script>
    document.body.classList.add('loading');

    const loadingScreen = document.getElementById('loading-screen');
    const progressBar = document.getElementById('progress-bar');
    const loadingText = document.getElementById('loading-text');

    const messages = [
        "Chargement",
        "PrÃ©paration",
        "Finalisation"
    ];

    let currentMessage = 0;

    function animateProgress() {
        let width = 0;
        const interval = setInterval(() => {
            if (width >= 100) {
                clearInterval(interval);
                finishLoading();
            } else {
                width += 1;
                if (progressBar) {
                    progressBar.style.width = `${width}%`;
                }
                
                if (width % 33 === 0 && loadingText) {
                    loadingText.classList.add('opacity-0');
                    setTimeout(() => {
                        loadingText.textContent = messages[currentMessage];
                        loadingText.classList.remove('opacity-0');
                        currentMessage = (currentMessage + 1) % messages.length;
                    }, 200);
                }
            }
        }, 30);
    }

    function finishLoading() {
        if (loadingScreen) {
            loadingScreen.classList.add('opacity-0');
            document.body.classList.remove('loading');
            
            setTimeout(() => {
                loadingScreen.style.display = 'none';
                
                const observerOptions = {
                    root: null,
                    rootMargin: '0px',
                    threshold: 0.1
                };

                const observerCallback = (entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.remove('opacity-0', 'translate-y-10');
                            observer.unobserve(entry.target);
                        }
                    });
                };

                const observer = new IntersectionObserver(observerCallback, observerOptions);
                const elements = document.querySelectorAll('[data-animate]');
                elements.forEach(el => observer.observe(el));

                document.querySelector('nav')?.classList.add('animate-fadeIn');
                document.querySelector('main')?.classList.add('animate-fadeIn');
            }, 700);
        }
    }

    window.addEventListener('load', () => {
        setTimeout(animateProgress, 500);
    });

    window.addEventListener('beforeunload', () => {
        document.body.classList.add('loading');
    });
</script>